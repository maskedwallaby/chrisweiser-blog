/* -------------------------------------------------- \
 *																										*
 *												SASS 												*
 *																										*
\* -------------------------------------------------- */

/* --------------------- Modules --------------------- */

@use "sass:math";
@use "sass:map";

/* --------------------- Layout --------------------- */

$body-font-size: 18px;

$breakpoints: (
  "phone-landscape": 667px,
  "tablet-portrait": 768px,
  "tablet-landscape": 1024px,
);

//---------------------------------
// Units
//---------------------------------

// --
// Converts pixels to ems
// @param  {Number} $px-values  The pixel value to convert
// @param  {Number} $font-size  The context for which to set the em value
// @return {Number}             The new em value
// --
@function em($px-values, $font-size: $body-font-size) {
  // Create an empty list that we can dump values into
  $em-values: ();
  @each $value in $px-values {
    // Check to see if value is 0, auto, or inherited
    // If so, do nothing and output value
    @if $value == 0 or $value == auto or $value == inherit {
      $em-values: append($em-values, $value);
    // If the value is a pixel, convert to em value
    } @else if unit($value) == 'px' {
      $em-values: append($em-values, #{math.div($value, $font-size)}em);
    // For everything else, keep as is
    } @else {
      $em-values: append($em-values, $value);
    }
  }
  @return $em-values;
}

// --
// Converts pixels to rems
// @param  {Number} $px-values  The pixel value to convert
// @param  {Number} $font-size  The context for which to set the rem value
// @return {Number}             The new rem value
// --
@function rem($px-values, $font-size: $base-font-size) {
  // Create an empty list that we can dump values into
  $rem-values: ();
  @each $value in $px-values {
    // Check to see if value is 0, auto, or inherited
    // If so, do nothing and output value
    @if $value == 0 or $value == auto or $value == inherit {
      $rem-values: append($rem-values, $value);
    // If the value is a pixel, convert to em value
    } @else if unit($value) == 'px' {
      $rem-values: append($rem-values, #{($value/$font-size)}rem);
    // For everything else, keep as is
    } @else {
      $rem-values: append($rem-values, $value);
    }
  }
  @return $rem-values;
}

/*------------------------------------*\
  Media Queries
\*------------------------------------*/

$print-media: false !default;

// Usage: mq(medium, min)
@mixin mq($point, $type: "min") {
  @if $print-media {
    @if $point == "print" {
      @media print {
        @content;
      }
    } @else {
      @content;
    }
  } @else {
    $breakpoint: null;
    @if type-of($point) == "number" {
      @if unitless($point) or unit($point) == "em" or unit($point) == "rem" or unit($point) == "%" {
        @warn "Please use pixel values.";
      } @else {
        $breakpoint: $point;
      }
    } @else if map-has-key($breakpoints, $point) {
      $breakpoint: map-get($breakpoints, $point);
    } @else {
      @warn "Couldn't find a breakpoint named `#{$point}`.";
    }

    @if $breakpoint != null {
      @if $type == "max" {
        @media screen and (max-width: em($breakpoint - 1px)) {
          @content;
        }
      } @else {
        @media screen and (min-width: em($breakpoint)) {
          @content;
        }
      }
    }
  }
}

/* --------------------- Mixins --------------------- */

@mixin spread {
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
}